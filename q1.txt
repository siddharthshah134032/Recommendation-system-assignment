import breeze.linalg._
val details = sc.textFile("/Users/Siddharth/Downloads/hw4Important_Materials_dataset/itemusermat.dat")
val moviesNames = sc.textFile("/Users/Siddharth/Downloads/hw4Important_Materials_dataset/movies.dat").map(l => (l.split("::")(0),(l.split("::")(1),l.split("::")(2))))
val movies = details.map(l=>(l.split(" ")(0),l.split(" ").drop(1).mkString))

def convertVector(line: String): Vector[Double] = {
    DenseVector(line.split("").map(_.toDouble))
  }
  
val movie_vec = movies.mapValues(convertVector _)

val cPoints_ful = movie_vec.takeSample(false, 10)
val cPoints = cPoints_ful.map(l =>l._2).toArray

def nearestPoint(p: Vector[Double], centroids: Array[Vector[Double]]): Int = {
    var bestIndex = 0
    var closest = Double.PositiveInfinity

    for (i <- 0 until centroids.length) {
      val tempDist = squaredDistance(p, centroids(i))
      if (tempDist < closest) {
        closest = tempDist
        bestIndex = i
      }
    }

    bestIndex
  }


var tempDist = 1.0

    for(i <- 0 until 10) {
	
     val nearest = movie_vec.map (p => (nearestPoint(p._2, cPoints), (p._2, 1,p._1)))
	 val clusterlist = nearest.map(l => (l._1,l._2._3)).groupByKey()
     val nearest_point = nearest.map(l => ((l._1),(l._2._1,l._2._2)))
      val pointStats = nearest_point.reduceByKey{case ((p1, c1), (p2, c2)) => (p1 + p2, c1 + c2)}

      val newPoints = pointStats.map {pair =>
        (pair._1, pair._2._1 * (1.0 / pair._2._2))}.collectAsMap()

      tempDist = 0.0
      for (i <- 0 until 10) {
        tempDist += squaredDistance(cPoints(i), newPoints(i))
      }

      for (newP <- newPoints) {
        cPoints(newP._1) = newP._2
      }
	  println("Finished Iteration:"+(i+1))
    }
	
	
	for((centre,centreIndex)<-cPoints.zipWithIndex)
	{
		println("Cluster"+centreIndex)
		//movie_vec.filter(x=>nearestPoint((x._2),cPoints)== centreIndex ).take(5).foreach(x => println(x._1))
		val movie_details1 = movie_vec.filter(x=>nearestPoint((x._2),cPoints)== centreIndex ).take(5)
		val movie_details = sc.parallelize(movie_details1)
		val result = movie_details.join(moviesNames).foreach(x => println(x._1+" || "+x._2._2._1+" || "+x._2._2._2))
	}
result.saveAsTextFile("/Users/Siddharth/Downloads/hw4Important_Materials_dataset/output.txt‚Äù)